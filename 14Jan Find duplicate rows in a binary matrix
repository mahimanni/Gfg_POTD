/*Given a boolean matrix of size RxC where each cell contains either 0 or 1, find the row numbers (0-based) of row which already exists or are repeated.
Input:
R = 4, C = 3
matrix[][] = {{ 1, 0, 0},
            { 1, 0, 0},
            { 0, 0, 0},
            { 0, 0, 0}}
Output: 
1 3 
Explanation:
Row 1 and Row 3 are duplicates of Row 0 and 2 respectively. 

Time Complexity: O(R * C)
Auxiliary Space: O(R * C)
*/

class Solution
{
    public static ArrayList<Integer> repeatedRows(int matrix[][], int m, int n)
    {
       HashMap<String,Integer> map=new HashMap<>();
       ArrayList<Integer> l=new ArrayList<>();
       String s="";
       
       for(int i=0;i<m;i++)
       {
           s="";
           for(int j=0;j<n;j++)
           {
               s+=matrix[i][j];//making each row into a string
           }
           if(map.containsKey(s))//if a row is present in map i.e. it is duplicate then add it to list
              l.add(i);
           else
              map.put(s,1);//if row not present then add it to map
       }
       return l;
    }
}
