/*
Given a binary tree with n nodes and a non-negative integer k, the task is to count the number of special nodes.
A node is considered special if there exists at least one leaf in its subtree such that the distance between the node and leaf is exactly k.

Note: Any such node should be counted only once. For example, if a node is at a distance k from 2 or more leaf nodes, then it would add only 1 to our count.

Example 1:
Input:
Binary tree
        1
      /   \
     2     3
   /  \   /  \
  4   5  6    7
          \ 
          8
k = 2
Output: 
2
Explanation: 
There are only two unique nodes that are at a distance of 2 units from the leaf node. (node 3 for leaf with value 8 and node 1 for leaves with values 4, 5 and 7)
Note that node 2 isn't considered for leaf with value 8 because it isn't a direct ancestor of node 8.

Example 2:
Input:
Binary tree
          1
         /
        3
       /
      5
    /  \
   7    8
         \
          9
k = 4
Output: 
1
Explanation: 
Only one node is there which is at a distance of 4 units from the leaf node.(node 1 for leaf with value 9) 

Time Complexity: O(n).
Auxiliary Space: O(Height of the Tree).
*/

// class Node  
// { 
//     int data; 
//     Node left, right; 
   
//     public Node(int d)  
//     { 
//         data = d; 
//         left = right = null; 
//     } 
// }

class Solution
{
    //Function to return count of nodes at a given distance from leaf nodes.
    int printKDistantfromLeaf(Node root, int k)
    {
        int result = 0;
        result = countKDist(root, k, new int[1000], new boolean[1000], 0);
        return result;
    }
    
    int countKDist(Node root, int k, int[] path, boolean[] vis, int len) 
    {
        // If the current node is null, return 0.
        if (root == null)
            return 0;

        // Add the current node's data to the path array and mark it as not visited.
        path[len] = root.data;
        vis[len] = false;
        len++;

        // If the current node is a leaf node and it is at least k distance away from the root
        // and the node at distance k from the leaf node is not already visited, mark it visited and return 1.
        if (root.left == null && root.right == null && len - k - 1 >= 0 && !vis[len - k - 1]) {
            vis[len - k - 1] = true;
            return 1;
        }

        // Recursively traverse the left and right subtrees and get the counts.
        int lt = countKDist(root.left, k, path, vis, len);
        int rt = countKDist(root.right, k, path, vis, len);

        // Return the sum of counts from left and right subtrees.
        return lt + rt;
    }
}
