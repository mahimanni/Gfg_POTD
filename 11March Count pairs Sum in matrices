/*
Given two sorted matrices mat1 and mat2 of size n x n of elements.
Each matrix contains numbers arranged in strictly ascending order,
with each row sorted from left to right, and the last element of a row being smaller than the first element of the next row. 
You're given a target value, x, your task is to find and count all pairs {a, b} such that a is from mat1 and b is from mat2 where sum of a and b is equal to x.

Example 1:
Input: 
n = 3, x = 21
mat1 = {{1, 5, 6},
        {8, 10, 11},
        {15, 16, 18}}
mat2 = {{2, 4, 7},
        {9, 10, 12},
        {13, 16, 20}}
OUTPUT: 4
Explanation: The pairs whose sum is found to be 21 are (1, 20), (5, 16), (8, 13), (11, 10).

Example 2:
Input:
n = 2, x = 10
mat1 = {{1, 2},
        {3, 4}}
mat2 = {{4, 5},
        {6, 7}}
Output: 2
Explanation: The pairs whose sum found to be 10 are (4, 6), (3, 7).

Expected Time Complexity: O(n^2).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ mat1[i][j] , mat2[i][j] ≤ 105
1 ≤ n ≤ 100
1 ≤ x ≤ 105
*/

//method-1 Bruteforce
//TC:O(n^2)
//SC:O(n^2)
class Solution {
    int countPairs(int mat1[][], int mat2[][], int n, int x) {
        int pairs=0;
        HashSet<Integer> set=new HashSet<>();
        for(int a[]:mat2)
         for(int b:a) 
             set.add(b);
         
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(set.contains(x-mat1[i][j]))
                    pairs++;
        
        return pairs;
    }
}

//method-2 Optimized
//TC:O(n)
//SC:O(1)
class Solution {
    int countPairs(int mat1[][], int mat2[][], int n, int x) {
        int pairs=0;
        int r1=0,c1=0;// 'r1' and 'c1' for pointing current element of mat1[][] 
        int r2=n-1,c2=n-1; // 'r2' and 'c2' for pointing current element of mat2[][] 
        
        //continues until 
        //either r1 reaches the end of mat1 or r2 reaches the beginning of mat2.
        while(r1<n && r2>=0)
        {
            int val=mat1[r1][c1]+mat2[r2][c2];
            
            if(val==x)
            {
                pairs++;
                c1++;// Move mat1[][] column 'c1' to right 
                c2--;// Move mat2[][] column 'c2' to left 
            }
            else if(val<x)// If true, move mat1[][] column 'c1' to right
            {
                c1++;
            }
            else// Else move mat2[][] column 'c2' to left
            {
                c2--;
            }
            
            if(c1==n)// If 'c1' crosses right boundary 
            {
                c1=0; // Reset 'c1' 
                r1++; // Increment row 'r1' 
            }
            
            if(c2==-1) // If 'c2' crosses left boundary 
            {
                c2=n-1; // Reset 'c2' 
                r2--; // Decrement row 'r2' 
            }
        }
        return pairs;
    }
}
