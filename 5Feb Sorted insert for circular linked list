/*
Given a sorted circular linked list of length n, the task is to insert a new node in this circular list so that it remains a sorted circular linked list.

Example 1:
Input:
n = 3
LinkedList = 1->2->4
(the first and last node is connected, i.e. 4 --> 1)
data = 2
Output: 
1 2 2 4
Explanation:
We can add 2 after the second node.

Example 2:
Input:
n = 4
LinkedList = 1->4->7->9
(the first and last node is connected, i.e. 9 --> 1)
data = 5
Output: 
1 4 5 7 9
Explanation:
We can add 5 after the second node.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)
*/

class Solution {
    public Node sortedInsert(Node head, int data) {
       
       Node newNode=new Node(data);
       
       if(head==null)//if there is no element in the linked list
       {
        newNode.next=newNode;
        head=newNode;
        return head;
       }
      
       Node prev=head;
       Node cur=head.next;
       
       //if the node is to be inserted at the start
       if(newNode.data<=head.data)
       {
           while(prev.next!=head)//to find the last node
           {
               prev=prev.next;
           }
           prev.next=newNode;//changing last node next to first node
           
           newNode.next=head;
           head=newNode;
           
           return head;
       }
       
       while(cur!=head && newNode.data>cur.data)//to place in sorted order
       {
           prev=cur;
           cur=cur.next;
       }
       
    //if node inserted at last 
    //   if(cur==head)
    //   {
    //       prev.next=newNode;
    //       newNode.next=head;
    //       return head;
    //   }
       prev.next=newNode;
       newNode.next=cur;
       
       return head;
    }
}
