/*
Given a string s which contains only lower alphabetic characters, 
check if it is possible to remove at most one character from this string in such a way 
that frequency of each distinct character becomes same in the string. Return true if it is possible to do else return false.

Note: The driver code print 1 if the value returned is true, otherwise 0.

Example 1:
Input:
s = "xyyz"
Output: 
1 
Explanation: 
Removing one 'y' will make frequency of each character to be 1.

Example 2:
Input:
s = "xxxxyyzz"
Output: 
0
Explanation: 
Frequency can not be made same by removing at most one character.

Expected Time Complexity: O(|s|) 
Expected Auxiliary Space: O(1)

Constraints:
1 <= |s| <= 105
*/


//method-1

/*
xyyz 1
xxxxyyzz 0
aababb 1
aaabbbcc 0
xxyyz 1
*/
class Solution {
    boolean sameFreq(String s) {
        int freq[]=new int[26];
        int size=0,minFreq=Integer.MAX_VALUE;
        
        for(int i=0;i<s.length();i++)
        {
            freq[s.charAt(i)-'a']++;
        }
        
        for(int i=0;i<26;i++)
        {
            if(freq[i]!=0)
            {
             size+=freq[i];    
             minFreq=Math.min(minFreq,freq[i]);
            } 
        }
        
        int minCount=0;
        for(int i=0;i<26;i++)
        {
            if(freq[i]==minFreq)
            {
                minCount+=minFreq;
            }
        }
        
        int c=0,flag=0;
        
        if(size==minCount || size-1==minCount+minFreq)
         return true;
        else if(minFreq==1)
        {
            for(int i=0;i<26;i++)
            {
                if(freq[i]!=1 && freq[i]!=0)
                {
                  if(flag==0)
                  {
                    c=freq[i];
                    flag=1;
                  } 
                  else
                  {
                      if(freq[i]!=c)
                       return false;
                  }
                }
            }
            return true;
        }
        return false;
    }
}
