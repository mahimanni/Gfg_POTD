/*
Given a string s of length n, find all the possible subsequences of the string s in lexicographically-sorted order.

Example 1:
Input : 
s = "abc"
Output: 
a ab abc ac b bc c
Explanation : 
There are a total 7 number of subsequences possible 
for the given string, and they are mentioned above 
in lexicgraphically sorted order.

Example 2:
Input: 
s = "aa"
Output: 
a a aa
Explanation : 
There are a total 3 number of subsequences possible 
for the given string, and they are mentioned above 
in lexicgraphically sorted order.

Your Task:
You don't need to read input or print anything. 
Your task is to complete the function AllPossibleStrings() which takes a string s as the input parameter and 
returns a list of all possible subsequences (non-empty) that can be formed from s in lexicographically-sorted order.

Expected Time Complexity: O( n*2n  )
Expected Space Complexity: O( n * 2n )

Constraints: 
1 <= n <= 16
s will constitute of lower case english alphabets
*/

//Using PowerSet ALgorithm
class Solution
{
    public List<String> AllPossibleStrings(String s)
    {
        char ch[]=s.toCharArray();
        int n=ch.length;
        ArrayList<String> ans=new ArrayList<>();
        
        for(int num=0;num<(1<<n);num++)
        {
            ArrayList<Character> al=new ArrayList<>();
            for(int bit =0;bit<n;bit++)
            {
                if((num&(1<<bit))!=0)
                    al.add(ch[bit]);
            }
            String str="";
            for(char x:al)
            {
                str+=x;
            }
            ans.add(str);
        }
        Collections.sort(ans);
        ans.remove(0);
        return ans;
    }
}
