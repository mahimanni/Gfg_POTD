/*
Given a root of a binary tree with n nodes, find its level order traversal.
Level order traversal of a tree is breadth-first traversal for the tree.

Example 1:
Input:
    1
  /   \ 
 3     2
Output:
1 3 2

Example 2:
Input:
        10
     /      \
    20       30
  /   \
 40   60
Output:
10 20 30 40 60

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

Constraints:
1 ≤ n ≤ 105
0 ≤ Data of a node ≤ 109
*/

/*
class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}
*/
class Solution
{
    //bfs uses a queue and in the queue you push the elements
    //as the depth is increasing so the first element I will grab out of the queue is the left element
   
    //Function to return the level order traversal of a tree.
    static ArrayList <Integer> levelOrder(Node root) 
    {
        ArrayList<Integer> ans=new ArrayList<>();
        Queue<Node> q=new LinkedList<>();
        Node cur=root;
        q.add(cur);
        
        while(!q.isEmpty()){
            int size=q.size();//in current level you have these many no of elements
            for(int i=0;i<size;i++){
                cur=q.poll();
                ans.add(cur.data);
                if(cur.left!=null){
                    q.add(cur.left);
                }    
                if(cur.right!=null){
                    q.add(cur.right);
                }    
            }
        }
        return ans;
    }
}
