/*
Given a Binary tree and a sum S, print all the paths, starting from root, that sums upto the given sum.
Path not necessarily end on a leaf node.

Example:
Input : 
sum = 38
Input tree
          10
       /     \
     28       13
           /     \
         14       15
        /   \     /  \
       21   22   23   24
Output :
10 28
10 13 15  
Explanation :
Sum of path 10, 28 = 38 and
Sum of path 10, 13, 15 = 38.

Time Complexity: O(N)
Space Complexity: O(N2)
*/

/*Tree Node
class Node {
    int data;
    Node left;
    Node right;
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
} 
*/
class Solution
{
    public static void recur_dfs(Node root,int sum, ArrayList<ArrayList<Integer>> ans,ArrayList<Integer> cur, int cursum)
    {
        if(root==null)
          return ;
          
        cursum+=root.data;
        cur.add(root.data);
        if(cursum==sum)
          ans.add(new ArrayList<>(cur));
          
        recur_dfs(root.left,sum,ans,cur,cursum);
        recur_dfs(root.right,sum,ans,cur,cursum);
        cur.remove(cur.size()-1);
    }
    public static ArrayList<ArrayList<Integer>> printPaths(Node root, int sum)
    {
        ArrayList<ArrayList<Integer>> ans=new ArrayList<>();
        ArrayList<Integer> cur=new ArrayList<>();
        recur_dfs(root,sum,ans,cur,0);
        return ans;
    }
}
