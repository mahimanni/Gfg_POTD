/*
Given a binary string s. 
Perform r iterations on string s, where in each iteration 0 becomes 01 and 1 becomes 10.
Find the nth character (considering 0 based indexing) of the string after performing these r iterations (see examples for better understanding).

Example 1:
Input:
s = "1100"
r = 2
n = 3
Output:
1
Explanation: 
After 1st iteration s becomes "10100101".
After 2nd iteration s becomes "1001100101100110".
Now, we can clearly see that the character at 3rd index is 1, and so the output.

Example 2:
Input:
s = "1010"
r = 1
n = 2
Output:
0
Explanation : 
After 1st iteration s becomes "10011001".
Now, we can clearly see that the character at 2nd index is 0, and so the output.

Expected Time Complexity: O(r*|s|)
Expected Auxilary Space: O(|s|)
 
Constraints:
1 ≤ |s| ≤ 103
1 ≤ r ≤ 20
0 ≤ n < |s|
*/

class Solution
{
    public char nthCharacter(String s, int r, int n)
    {
        String str="";
        while(r>0)
        {
            for(int i=0;i<=s.length()/2;i++)
            {
                char ch=s.charAt(i);
                if(ch=='0')
                    str+="01";
                else if(ch=='1')
                    str+="10";
            }
            r--;
            s=str;
            str="";
        }
        return s.charAt(n);
    }
}
