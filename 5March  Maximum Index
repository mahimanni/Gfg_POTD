/*
Given an array a of n positive integers.
The task is to find the maximum of j - i subjected to the constraint of a[i] < a[j] and i < j.

Example 1:
Input:
n = 2
a[] = {1, 10}
Output:
1
Explanation:
a[0] < a[1] so (j-i) is 1-0 = 1.

Example 2:
Input:
n = 9
a[] = {34, 8, 10, 3, 2, 80, 30, 33, 1}
Output:
6
Explanation:
In the given array a[1] < a[7] satisfying the required condition(a[i] < a[j]) thus giving the maximum difference of j - i which is 6(7-1).

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 ≤ n ≤ 106
0 ≤ a[i] ≤ 109
*/

//method-1 somewhat bruteforce
class Solution{
    
    // A[]: input array
    // N: size of array
    // Function to find the maximum index difference.
    static int maxIndexDiff(int a[], int n) { 
        int i=0,j=n-1,m=0;
        while(i<=j)
        {
            if(a[i]<=a[j])
            {
                m=Math.max(m,j-i);
                i++;
                j=n-1;
            }
            else
            {
                j--;
            }
        }
        return m;
    }
}


//method-2 optimized
class Solution{
    static int maxIndexDiff(int a[], int n) { 
        int maxDiff=0;
        int leftMin[]=new int[n];
        int rightMax[]=new int[n];
        
        leftMin[0]=a[0];
        rightMax[n-1]=a[n-1];
        
        for(int i=1;i<n;i++)
        {
            leftMin[i]=Math.min(leftMin[i-1],a[i]);
        }
        
        for(int j=n-2;j>=0;j--)
        {
            rightMax[j]=Math.max(rightMax[j+1],a[j]);
        }
        
        int i=0,j=0;
        while(i<n && j<n)
        {
            if(leftMin[i]<=rightMax[j])
            {
                maxDiff=Math.max(maxDiff,j-i);
                j++;
            }
            else
            {
                i++;
            }
        }
        
        return maxDiff;
    }
}
